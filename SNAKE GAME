
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;

public class SnakeGame extends JFrame implements KeyListener {
    private static final int WIDTH = 400;
    private static final int HEIGHT = 400;
    private static final int UNIT_SIZE = 20;
    private ArrayList<Point> snake;
    private Point food;
    private int direction;
    private Timer timer;

    public SnakeGame() {
        setTitle("Snake Game");
        setSize(WIDTH, HEIGHT);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        addKeyListener(this);

        snake = new ArrayList<>();
        snake.add(new Point(WIDTH / 2, HEIGHT / 2));
        spawnFood();

        direction = KeyEvent.VK_RIGHT;

        timer = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                move();
                checkCollisions();
                repaint();
            }
        });
        timer.start();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;

        // Draw snake
        g2d.setColor(Color.GREEN);
        for (Point point : snake) {
            g2d.fillRect(point.x, point.y, UNIT_SIZE, UNIT_SIZE);
        }

        // Draw food
        g2d.setColor(Color.RED);
        g2d.fillRect(food.x, food.y, UNIT_SIZE, UNIT_SIZE);
    }

    private void move() {
        Point head = snake.get(0);
        Point newHead = (Point) head.clone();

        switch (direction) {
            case KeyEvent.VK_UP:
                newHead.y -= UNIT_SIZE;
                break;
            case KeyEvent.VK_DOWN:
                newHead.y += UNIT_SIZE;
                break;
            case KeyEvent.VK_LEFT:
                newHead.x -= UNIT_SIZE;
                break;
            case KeyEvent.VK_RIGHT:
                newHead.x += UNIT_SIZE;
                break;
        }

        snake.add(0, newHead);

        if (!newHead.equals(food)) {
            snake.remove(snake.size() - 1);
        } else {
            spawnFood();
        }
    }

    private void spawnFood() {
        int x = new Random().nextInt(WIDTH / UNIT_SIZE) * UNIT_SIZE;
        int y = new Random().nextInt(HEIGHT / UNIT_SIZE) * UNIT_SIZE;
        food = new Point(x, y);
    }

    private void checkCollisions() {
        Point head = snake.get(0);
        // Check if snake hits walls
        if (head.x < 0 || head.x >= WIDTH || head.y < 0 || head.y >= HEIGHT) {
            gameOver();
        }
        // Check if snake hits itself
        for (int i = 1; i < snake.size(); i++) {
            if (head.equals(snake.get(i))) {
                gameOver();
                break;
            }
        }
    }

    private void gameOver() {
        timer.stop();
        JOptionPane.showMessageDialog(this, "Game Over!");
        System.exit(0);
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if ((key == KeyEvent.VK_LEFT && direction != KeyEvent.VK_RIGHT) ||
                (key == KeyEvent.VK_RIGHT && direction != KeyEvent.VK_LEFT) ||
                (key == KeyEvent.VK_UP && direction != KeyEvent.VK_DOWN) ||
                (key == KeyEvent.VK_DOWN && direction != KeyEvent.VK_UP)) {
            direction = key;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SnakeGame().setVisible(true);
            }
        });
    }
}
